#include <WiFi.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <time.h>

const char* ssid = "FFNET";
const char* password = "W4tchTh3G4M3*";

WebServer server(80);

// Pines de relé
#define RELAY_PIN1 2
#define RELAY_PIN2 4  // Cambia según tu conexión física

bool relayState1 = false;
bool relayState2 = false;

// Variables para almacenar fecha/hora de última apertura
String lastOpen1 = "Nunca";
String lastOpen2 = "Nunca";

// URLs de las cámaras (MJPEG streaming si la cámara lo soporta)
const char* cameraURL1 = "http://192.168.3.241/cgi-bin/nph-zms?mode=jpeg&monitor=1&user=92PrVjLB6X3Ljt88&pass=y5Id38czsufoQ7Ma";
const char* cameraURL2 = "http://192.168.3.241/cgi-bin/nph-zms?mode=jpeg&monitor=27&user=92PrVjLB6X3Ljt88&pass=y5Id38czsufoQ7Ma";

// URL del segundo ESP32 (puerta remota)
const char* esp32Relay2 = "http://192.168.3.42/pulse";

// Configuración NTP
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = -21600; // Costa Rica GMT-6
const int   daylightOffset_sec = 0;

// Función para actualizar la fecha/hora de última apertura
void updateLastOpen1() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    lastOpen1 = "Hora no disponible";
    return;
  }
  char buf[25];
  strftime(buf, sizeof(buf), "%d/%m/%Y %H:%M:%S", &timeinfo);
  lastOpen1 = String(buf);
}

void updateLastOpen2() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    lastOpen2 = "Hora no disponible";
    return;
  }
  char buf[25];
  strftime(buf, sizeof(buf), "%d/%m/%Y %H:%M:%S", &timeinfo);
  lastOpen2 = String(buf);
}

// Función que genera el dashboard
void handleRoot() {
  String html = "<!DOCTYPE html><html lang='en'><head><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<title>IT Doors Dashboard</title>";
  html += "<style>";
  html += "body {font-family: Arial, sans-serif; background-color:#121212; color:#fff; margin:0; padding:20px;}";
  html += "h1 {text-align:center; color:#00ffcc;}";
  html += ".grid {display:grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap:20px; margin-top:20px;}";
  html += ".card {background-color:#1f1f1f; border-radius:12px; padding:20px; box-shadow:0 4px 10px rgba(0,0,0,0.5);}";
  html += ".card img {width:100%; border-radius:8px;}";
  html += ".card button {margin-top:10px; width:100%; padding:15px; font-size:16px; border:none; border-radius:8px; cursor:pointer; background-color:#00ffcc; color:#000; transition:0.3s;}";
  html += ".card button:hover {background-color:#00cca3;}";
  html += ".update {margin-top:10px; font-weight:bold;}";
  html += "</style></head><body>";
  html += "<h1>IT Doors</h1>";
  html += "<div class='grid'>";

  // Tarjeta Puerta 1 + Cámara
  html += "<div class='card'>";
  html += "<h2>IT Main</h2>";
  html += "<img id='cam1' src='" + String(cameraURL1) + "'>";
  html += "<button onclick=\"location.href='/pulse1'\">Click to Open</button>";
  html += "<div class='update'>Last Open: <span id='time1'>" + lastOpen1 + "</span></div>";
  html += "</div>";

  // Tarjeta Puerta 2 + Cámara
  html += "<div class='card'>";
  html += "<h2>IT Kitchen</h2>";
  html += "<img id='cam2' src='" + String(cameraURL2) + "'>";
  html += "<button onclick=\"location.href='/pulse2'\">Click to Open</button>";
  html += "<div class='update'>Last Open: <span id='time2'>" + lastOpen2 + "</span></div>";
  html += "</div>";

  html += "</div>"; // grid

  // Script para refresco de cámaras y estado
  html += "<script>";
  html += "function refresh(){";
  html += "document.getElementById('cam1').src='" + String(cameraURL1) + "&rs='+new Date().getTime();";
  html += "document.getElementById('cam2').src='" + String(cameraURL2) + "&rs='+new Date().getTime();";
  html += "fetch('/status').then(r=>r.json()).then(data=>{";
  html += "document.getElementById('time1').innerText = data.lastOpen1;";
  html += "document.getElementById('time2').innerText = data.lastOpen2;";
  html += "});";
  html += "}";
  html += "setInterval(refresh,1000);"; // cada 1 segundo
  html += "</script>";

  html += "</body></html>";

  server.send(200, "text/html", html);
}

// Función para Puerta 1 local
void handlePulse1() {
  digitalWrite(RELAY_PIN1, HIGH);
  relayState1 = true;

  updateLastOpen1();

  delay(2000);
  digitalWrite(RELAY_PIN1, LOW);
  relayState1 = false;

  server.sendHeader("Location", "/");
  server.send(303);
}

// Función para Puerta 2 remota
void handlePulse2() {
  HTTPClient http;
  http.begin(esp32Relay2);
  http.GET();
  http.end();
  relayState2 = true;

  updateLastOpen2();

  delay(2000);
  relayState2 = false;

  server.sendHeader("Location", "/");
  server.send(303);
}

// Endpoint para enviar la fecha/hora de última apertura
void handleStatus() {
  String json = "{";
  json += "\"lastOpen1\":\"" + lastOpen1 + "\",";
  json += "\"lastOpen2\":\"" + lastOpen2 + "\"";
  json += "}";
  server.send(200, "application/json", json);
}

void setup() {
  Serial.begin(115200);
  pinMode(RELAY_PIN1, OUTPUT);
  pinMode(RELAY_PIN2, OUTPUT);
  digitalWrite(RELAY_PIN1, LOW);
  digitalWrite(RELAY_PIN2, LOW);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado! IP: " + WiFi.localIP().toString());

  // Configurar NTP
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  server.on("/", handleRoot);
  server.on("/pulse1", handlePulse1);
  server.on("/pulse2", handlePulse2);
  server.on("/status", handleStatus);
  server.begin();
}

void loop() {
  server.handleClient();
}
